// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $(function() {
    var Plotter, f;
    Plotter = (function() {

      function Plotter($canvas) {
        this._xy_to_screen = __bind(this._xy_to_screen, this);
        this.width = parseInt($canvas.attr('width'));
        this.height = parseInt($canvas.attr('height'));
        this.ctx = $canvas[0].getContext('2d');
      }

      Plotter.prototype.set_window = function(min_x, max_x, min_y, max_y) {
        return this.window = {
          min: [min_x, min_y],
          max: [max_x, max_y],
          width: max_x - min_x,
          height: max_y - min_y
        };
      };

      Plotter.prototype._xy_to_screen = function(_arg) {
        var u, v, x, y;
        x = _arg[0], y = _arg[1];
        u = (x - this.window.min[0]) * this.width / this.window.width;
        v = (this.window.max[1] - y) * this.height / this.window.height;
        return [u, v];
      };

      Plotter.grain = 50;

      Plotter.epsilon = 0.1;

      Plotter.prototype._make_indices = function() {
        return _.range(this.window.min[0], this.window.max[0] + Plotter.epsilon, this.window.width / Plotter.grain);
      };

      Plotter.prototype._move_to = function(_arg) {
        var x, y;
        x = _arg[0], y = _arg[1];
        return this.ctx.moveTo(x, y);
      };

      Plotter.prototype._line_to = function(_arg) {
        var x, y;
        x = _arg[0], y = _arg[1];
        return this.ctx.lineTo(x, y);
      };

      Plotter.prototype._plot_points = function(points) {
        var point, _i, _len, _ref;
        this.ctx.beginPath();
        this.ctx.strokeStyle = '#5c5cd6';
        this._move_to(points[0]);
        _ref = points.slice(1);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          point = _ref[_i];
          this._line_to(point);
        }
        return this.ctx.stroke();
      };

      Plotter.prototype.plot = function(f) {
        var indices, screen_points, values;
        indices = this._make_indices();
        values = _(indices).map(f);
        screen_points = _.map(_.zip(indices, values), this._xy_to_screen);
        this.ctx.clearRect(0, 0, this.width, this.height);
        this._draw_axes();
        return this._plot_points(screen_points);
      };

      Plotter.prototype._plus = function(p1, p2) {
        return [p1[0] + p2[0], p1[1] + p2[1]];
      };

      Plotter.min = 1;

      Plotter.tick_width = 4;

      Plotter.prototype._draw_axes = function() {
        var delta, point, x, y, _i, _j, _len, _len1, _ref, _ref1;
        this.ctx.strokeStyle = "#000";
        if ((this.window.min[0] <= 0 && 0 <= this.window.max[0])) {
          this.ctx.beginPath();
          this._move_to(this._xy_to_screen([0, this.window.min[1]]));
          this._line_to(this._xy_to_screen([0, this.window.max[1]]));
          this.ctx.stroke();
          delta = Math.ceil(this.window.width / 10);
          this.ctx.beginPath();
          _ref = (_.range(0, this.window.max[1], delta)).concat(_.range(this.window.min[1], 0, delta));
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            y = _ref[_i];
            point = this._xy_to_screen([0, y]);
            this._move_to(this._plus(point, [-Plotter.tick_width, 0]));
            this._line_to(this._plus(point, [Plotter.tick_width, 0]));
          }
          this.ctx.stroke();
        }
        if ((this.window.min[1] <= 0 && 0 <= this.window.max[1])) {
          this.ctx.beginPath();
          this._move_to(this._xy_to_screen([this.window.min[0], 0]));
          this._line_to(this._xy_to_screen([this.window.max[0], 0]));
          this.ctx.stroke();
          delta = Math.ceil(this.window.width / 10);
          this.ctx.beginPath();
          _ref1 = (_.range(0, this.window.max[0], delta)).concat(_.range(this.window.min[0], 0, delta));
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            x = _ref1[_j];
            point = this._xy_to_screen([x, 0]);
            this._move_to(this._plus(point, [0, -Plotter.tick_width]));
            this._line_to(this._plus(point, [0, Plotter.tick_width]));
          }
          return this.ctx.stroke();
        }
      };

      return Plotter;

    })();
    window.plotter = new Plotter($('#paper'));
    plotter.set_window(-2, 2, -8, 8);
    f = function(x) {
      return Math.pow(x, $('#pow').val());
    };
    plotter.plot(f);
    return $('#pow').change(function() {
      return plotter.plot(f);
    });
  });

}).call(this);
